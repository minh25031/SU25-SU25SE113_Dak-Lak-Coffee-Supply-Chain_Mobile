import DateTimePicker from '@react-native-community/datetimepicker';
import { format } from 'date-fns';
import { useRouter } from 'expo-router';
import React, { useEffect, useState } from 'react';
import { ScrollView, StyleSheet, Text, View } from 'react-native';
import { Button, Card, Chip, TextInput } from 'react-native-paper';

import Background from '@/components/Background';
import Header from '@/components/Header';
import { ProcessingBatch, createWarehouseInboundRequest, getProcessingBatchesForFarmer } from '@/core/api/warehouseRequest.api';

export default function CreateWarehouseRequestScreen() {
  const router = useRouter();
  const [loading, setLoading] = useState(false);
  const [batches, setBatches] = useState<ProcessingBatch[]>([]);
  const [selectedBatch, setSelectedBatch] = useState<ProcessingBatch | null>(null);
  const [quantity, setQuantity] = useState('');
  const [preferredDeliveryDate, setPreferredDeliveryDate] = useState(new Date());
  const [note, setNote] = useState('');
  const [showDeliveryDatePicker, setShowDeliveryDatePicker] = useState(false);

  useEffect(() => {
    loadBatches();
  }, []);

  const loadBatches = async () => {
    try {
      const batchList = await getProcessingBatchesForFarmer();
      setBatches(batchList);
    } catch (error) {
      console.error('L·ªói t·∫£i danh s√°ch l√¥ x·ª≠ l√Ω:', error);
    }
  };

  const handleSubmit = async () => {
    if (!selectedBatch || !quantity) {
      alert('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc');
      return;
    }

    if (parseFloat(quantity) <= 0) {
      alert('S·ªë l∆∞·ª£ng ph·∫£i l·ªõn h∆°n 0');
      return;
    }

    try {
      setLoading(true);
             await createWarehouseInboundRequest({
         batchId: selectedBatch.batchId,
         requestedQuantity: parseFloat(quantity),
         preferredDeliveryDate: format(preferredDeliveryDate, 'yyyy-MM-dd'),
         note: note || undefined,
       });
      
      alert('T·∫°o y√™u c·∫ßu nh·∫≠p kho th√†nh c√¥ng!');
      router.back();
    } catch (error: any) {
      alert(error.message || 'C√≥ l·ªói x·∫£y ra khi t·∫°o y√™u c·∫ßu');
    } finally {
      setLoading(false);
    }
  };

  const formatDate = (date: Date) => {
    return format(date, 'dd/MM/yyyy');
  };

  const getStatusLabel = (status: number) => {
    switch (status) {
      case 0: return 'Ch∆∞a b·∫Øt ƒë·∫ßu';
      case 1: return 'ƒêang x·ª≠ l√Ω';
      case 2: return 'Ho√†n t·∫•t';
      case 3: return 'ƒê√£ hu·ª∑';
      default: return 'Kh√¥ng x√°c ƒë·ªãnh';
    }
  };

  return (
    <Background>
      <Header title="T·∫°o y√™u c·∫ßu nh·∫≠p kho" showBack />
      
      <ScrollView style={styles.container} contentContainerStyle={styles.contentContainer}>
        {/* Info Card */}
        <Card style={styles.infoCard}>
          <Card.Content>
            <Text style={styles.infoTitle}>üìã H∆∞·ªõng d·∫´n</Text>
            <View style={styles.infoList}>
              <Text style={styles.infoItem}>‚Ä¢ Ch·ªçn l√¥ x·ª≠ l√Ω ƒë√£ ho√†n t·∫•t</Text>
              <Text style={styles.infoItem}>‚Ä¢ Nh·∫≠p s·ªë l∆∞·ª£ng c·∫ßn nh·∫≠p kho</Text>
              <Text style={styles.infoItem}>‚Ä¢ Ch·ªçn ng√†y giao d·ª± ki·∫øn</Text>
              <Text style={styles.infoItem}>‚Ä¢ Th√™m ghi ch√∫ n·∫øu c·∫ßn</Text>
            </View>
          </Card.Content>
        </Card>

        {/* Main Form */}
        <Card style={styles.card}>
          <Card.Content>
            <Text style={styles.sectionTitle}>üì¶ Th√¥ng tin y√™u c·∫ßu nh·∫≠p kho</Text>
            
            {/* S·ªë l∆∞·ª£ng */}
            <Text style={styles.label}>‚öñÔ∏è S·ªë l∆∞·ª£ng (kg) *</Text>
            <TextInput
              value={quantity}
              onChangeText={setQuantity}
              keyboardType="numeric"
              placeholder="Nh·∫≠p s·ªë l∆∞·ª£ng c·∫ßn nh·∫≠p kho"
              style={styles.input}
            />
                         <Text style={styles.helperText}>Nh·∫≠p s·ªë l∆∞·ª£ng b·∫°n mu·ªën nh·∫≠p kho</Text>

            {/* Ng√†y giao */}
            <Text style={styles.label}>üìÖ Ng√†y giao d·ª± ki·∫øn *</Text>
            <Button
              mode="outlined"
              onPress={() => setShowDeliveryDatePicker(true)}
              style={styles.dateButton}
              icon="calendar"
            >
              {formatDate(preferredDeliveryDate)}
            </Button>
            <Text style={styles.helperText}>Ch·ªçn ng√†y t·ª´ h√¥m nay tr·ªü ƒëi</Text>

            {/* Ghi ch√∫ */}
            <Text style={styles.label}>üìù Ghi ch√∫</Text>
            <TextInput
              value={note}
              onChangeText={setNote}
              placeholder="Th√¥ng tin th√™m v·ªÅ y√™u c·∫ßu nh·∫≠p kho (kh√¥ng b·∫Øt bu·ªôc)"
              multiline
              numberOfLines={3}
              style={styles.textArea}
            />
            <Text style={styles.helperText}>M√¥ t·∫£ chi ti·∫øt v·ªÅ y√™u c·∫ßu n·∫øu c·∫ßn</Text>

            {/* Ch·ªçn l√¥ x·ª≠ l√Ω */}
            <Text style={styles.label}>‚òï Ch·ªçn l√¥ x·ª≠ l√Ω *</Text>
            <ScrollView horizontal showsHorizontalScrollIndicator={false} style={styles.batchContainer}>
              {batches.map((batch) => (
                <Chip
                  key={batch.batchId}
                  selected={selectedBatch?.batchId === batch.batchId}
                  onPress={() => setSelectedBatch(batch)}
                  style={styles.batchChip}
                  textStyle={styles.batchText}
                >
                  {batch.batchCode}
                </Chip>
              ))}
            </ScrollView>
            <Text style={styles.helperText}>Ch·ªâ hi·ªÉn th·ªã c√°c l√¥ ƒë√£ ho√†n t·∫•t x·ª≠ l√Ω</Text>

            {selectedBatch && (
              <View style={styles.batchInfo}>
                <Text style={styles.batchInfoText}>üìã M√£ l√¥: {selectedBatch.batchCode}</Text>
                <Text style={styles.batchInfoText}>üå± Lo·∫°i c√† ph√™: {selectedBatch.typeName || 'N/A'}</Text>
                <Text style={styles.batchInfoText}>üìä S·ªë l∆∞·ª£ng ƒë√£ x·ª≠ l√Ω: {selectedBatch.totalOutputQuantity} kg</Text>
                <Text style={styles.batchInfoText}>‚úÖ Tr·∫°ng th√°i: {getStatusLabel(selectedBatch.status)}</Text>
              </View>
            )}
          </Card.Content>
        </Card>

        <View style={styles.actionButtons}>
          <Button
            mode="contained"
            onPress={handleSubmit}
            loading={loading}
            disabled={loading}
            style={styles.submitButton}
            buttonColor="#FD7622"
          >
            {loading ? 'ƒêang g·ª≠i y√™u c·∫ßu...' : 'üì¶ G·ª≠i y√™u c·∫ßu nh·∫≠p kho'}
          </Button>
          
          <Button
            mode="outlined"
            onPress={() => router.back()}
            style={styles.backButton}
            textColor="#6B7280"
            buttonColor="transparent"
            icon="arrow-left"
          >
            Quay l·∫°i
          </Button>
        </View>
      </ScrollView>

      {showDeliveryDatePicker && (
        <DateTimePicker
          value={preferredDeliveryDate}
          mode="date"
          display="default"
          onChange={(event, selectedDate) => {
            setShowDeliveryDatePicker(false);
            if (selectedDate) {
              setPreferredDeliveryDate(selectedDate);
            }
          }}
        />
      )}
    </Background>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  contentContainer: {
    padding: 16,
    paddingBottom: 32,
  },
  infoCard: {
    marginBottom: 16,
    elevation: 2,
    backgroundColor: '#FEF3C7',
    borderColor: '#F59E0B',
  },
  infoTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#92400E',
    marginBottom: 12,
  },
  infoList: {
    gap: 6,
  },
  infoItem: {
    fontSize: 13,
    color: '#92400E',
    lineHeight: 18,
  },
  card: {
    marginBottom: 16,
    elevation: 2,
    backgroundColor: '#FFFFFF',
    borderColor: '#F59E0B',
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#1F2937',
    marginBottom: 20,
  },
  label: {
    fontSize: 14,
    fontWeight: '500',
    color: '#374151',
    marginBottom: 8,
    marginTop: 16,
  },
  helperText: {
    fontSize: 12,
    color: '#6B7280',
    marginTop: 4,
    marginBottom: 8,
  },
  batchContainer: {
    marginBottom: 16,
  },
  batchChip: {
    marginRight: 8,
    backgroundColor: '#F3F4F6',
    borderColor: '#F59E0B',
  },
  batchText: {
    color: '#374151',
  },
  batchInfo: {
    backgroundColor: '#FEF3C7',
    padding: 12,
    borderRadius: 8,
    marginBottom: 16,
    borderColor: '#F59E0B',
    borderWidth: 1,
  },
  batchInfoText: {
    fontSize: 13,
    color: '#92400E',
    marginBottom: 4,
  },
  input: {
    backgroundColor: '#FFFFFF',
    borderColor: '#F59E0B',
  },
  dateButton: {
    marginBottom: 16,
    borderColor: '#F59E0B',
  },
  textArea: {
    backgroundColor: '#FFFFFF',
    borderColor: '#F59E0B',
  },
  actionButtons: {
    gap: 12,
    marginTop: 16,
  },
  submitButton: {
    paddingVertical: 12,
    borderRadius: 8,
  },
  backButton: {
    borderColor: '#E5E7EB',
  },
});
