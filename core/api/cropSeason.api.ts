import api from './axiosClient';

// ========== TYPES ==========
export interface CropSeasonDetail {
  detailId: string;
  coffeeTypeId: string;
  typeName: string;
  areaAllocated: number;
  expectedHarvestStart: string;
  expectedHarvestEnd: string;
  estimatedYield: number;
  actualYield: number | null;
  plannedQuality: string;
  qualityGrade: string;
  status: string;
  farmerId: string;
  farmerName: string;
}

export interface CropSeason {
  cropSeasonId: string;
  seasonName: string;
  startDate: string;
  endDate: string;
  area: number;
  note: string;
  status: string;
  farmerId: string;
  farmerName: string;
  commitmentId: string;
  commitmentName: string;
  registrationId: string;
  registrationCode: string;
  details: CropSeasonDetail[];
}

export interface CropSeasonListItem {
  cropSeasonId: string;
  seasonName: string;
  startDate: string;
  endDate: string;
  area: number;
  farmerId: string;
  farmerName: string;
  status: string;
}

export interface CropSeasonUpdatePayload {
  cropSeasonId: string;
  commitmentId: string;
  seasonName: string;
  area?: number | null;
  startDate: string;
  endDate: string;
  note?: string | null;
  status: number;
}

export interface ServiceResult<T = any> {
  code: number | string;
  message: string;
  data: T | null;
}

// ========== API FUNCTIONS ==========

// L·∫•y danh s√°ch m√πa v·ª• (cho Admin/Manager)
export async function getAllCropSeasons(): Promise<ServiceResult<CropSeasonListItem[]>> {
  try {
    console.log('üîç Calling API: /CropSeasons');
    const res = await api.get("/CropSeasons");
    console.log('üì° Raw API Response:', res);
    console.log('üì° Response status:', res.status);
    console.log('üì° Response data:', res.data);
    
    // Ki·ªÉm tra c·∫•u tr√∫c response
    if (res.data && res.data.data) {
      // N·∫øu response c√≥ c·∫•u tr√∫c { data: [...], message: "...", status: ... }
      return { code: 200, message: "Th√†nh c√¥ng", data: res.data.data };
    } else if (res.data && Array.isArray(res.data)) {
      // N·∫øu response tr·ª±c ti·∫øp l√† array
      return { code: 200, message: "Th√†nh c√¥ng", data: res.data };
    } else {
      console.log('‚ö†Ô∏è Unexpected response structure:', res.data);
      return { code: 200, message: "Th√†nh c√¥ng", data: [] };
    }
  } catch (err) {
    console.error("getAllCropSeasons:", err);
    return { code: 400, message: "Kh√¥ng th·ªÉ t·∫£i danh s√°ch m√πa v·ª•", data: null };
  }
}

// L·∫•y danh s√°ch m√πa v·ª• c·ªßa user hi·ªán t·∫°i (Farmer)
export async function getCropSeasonsForCurrentUser(params?: {
  search?: string;
  status?: string;
  page?: number;
  pageSize?: number;
}): Promise<ServiceResult<CropSeasonListItem[]>> {
  try {
    // Th·ª≠ endpoint ch√≠nh tr∆∞·ªõc
    console.log('üîç Calling API: /CropSeasons (for current user)');
    try {
      const res = await api.get("/CropSeasons", {
        params: {
          search: params?.search,
          status: params?.status,
          page: params?.page ?? 1,
          pageSize: params?.pageSize ?? 10,
          // Th√™m tham s·ªë ƒë·ªÉ l·∫•y m√πa v·ª• c·ªßa farmer hi·ªán t·∫°i
          currentUser: true,
        },
      });
      console.log('üì° Farmer API Response:', res);
      
      // Ki·ªÉm tra c·∫•u tr√∫c response
      if (res.data && res.data.data) {
        return { code: 200, message: "Th√†nh c√¥ng", data: res.data.data };
      } else if (res.data && Array.isArray(res.data)) {
        return { code: 200, message: "Th√†nh c√¥ng", data: res.data };
      } else {
        console.log('‚ö†Ô∏è Unexpected farmer response structure:', res.data);
        return { code: 200, message: "Th√†nh c√¥ng", data: [] };
      }
    } catch (firstError) {
      console.log('‚ö†Ô∏è First endpoint failed, trying alternative...');
      
      // Th·ª≠ endpoint kh√°c n·∫øu endpoint ƒë·∫ßu ti√™n th·∫•t b·∫°i
      const res = await api.get("/CropSeasons");
      console.log('üì° Alternative API Response:', res);
      
      if (res.data && res.data.data) {
        return { code: 200, message: "Th√†nh c√¥ng", data: res.data.data };
      } else if (res.data && Array.isArray(res.data)) {
        return { code: 200, message: "Th√†nh c√¥ng", data: res.data };
      } else {
        console.log('‚ö†Ô∏è Alternative endpoint also failed');
        return { code: 200, message: "Th√†nh c√¥ng", data: [] };
      }
    }
  } catch (err) {
    console.error("getCropSeasonsForCurrentUser:", err);
    return { code: 400, message: "Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu", data: null };
  }
}

// L·∫•y chi ti·∫øt m√πa v·ª• theo ID
export async function getCropSeasonById(id: string): Promise<ServiceResult<CropSeason>> {
  try {
    const res = await api.get(`/CropSeasons/${id}`);
    return { code: 200, message: "Th√†nh c√¥ng", data: res.data };
  } catch (err) {
    console.error("getCropSeasonById:", err);
    return { code: 400, message: "Kh√¥ng t√¨m th·∫•y m√πa v·ª•", data: null };
  }
}

// T·∫°o m·ªõi m√πa v·ª•
export async function createCropSeason(data: Partial<CropSeason>): Promise<ServiceResult> {
  try {
    const res = await api.post("/CropSeasons", data);
    return res.data;
  } catch (err: any) {
    console.error("createCropSeason:", err);
    const message = err?.response?.data?.message || err.message || "T·∫°o m√πa v·ª• th·∫•t b·∫°i.";
    return { code: 400, message, data: null };
  }
}

// C·∫≠p nh·∫≠t m√πa v·ª•
export async function updateCropSeason(
  id: string,
  data: Partial<CropSeasonUpdatePayload>
): Promise<ServiceResult> {
  try {
    const res = await api.put(`/CropSeasons/${id}`, data);
    return { code: 200, message: "C·∫≠p nh·∫≠t th√†nh c√¥ng", data: null };
  } catch (err: any) {
    console.error("updateCropSeason:", err);
    const message = err?.response?.data?.message || err.message || "C·∫≠p nh·∫≠t th·∫•t b·∫°i.";
    return { code: 400, message, data: null };
  }
}

// Xo√° m·ªÅm m√πa v·ª•
export async function deleteCropSeasonById(id: string): Promise<ServiceResult> {
  try {
    const res = await api.patch(`/CropSeasons/soft-delete/${id}`);
    return { code: 200, message: res.data || "ƒê√£ xo√° m√πa v·ª•", data: null };
  } catch (err: any) {
    const message = err?.response?.data || err?.message || "Xo√° m√πa v·ª• th·∫•t b·∫°i.";
    return { code: 400, message, data: null };
  }
}
